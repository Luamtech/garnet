name: Docker Garnet CI

on:
  workflow_dispatch:
  push:
    branches: 
      - main
      - 'releases/*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: git.luam.tech
  REPOSITORY: yamoshi454/garnet
  IMAGE_NAME: garnet-app

permissions:
  contents: read

jobs:
  security-scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
        with:
          trivy-version: '0.58.0'

      - name: Cache Trivy vulnerability database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            trivy-${{ runner.os }}-
      
      - name: Generate security report
        run: |
          mkdir -p security-reports
          REPORT_DATE=$(date +'%Y%m%d_%H%M%S')
          
          trivy fs . --severity HIGH,CRITICAL --ignore-unfixed \
            --format template --template '{{- range . }}{{range .Vulnerabilities}}{{println .VulnerabilityID "\t" .Severity "\t" .PkgName "\t" .InstalledVersion "\t" .FixedVersion }}{{end}}{{end}}' \
            > security-reports/vuln_report_${REPORT_DATE}.txt || true
          
          if [ ! -s security-reports/vuln_report_${REPORT_DATE}.txt ]; then
            echo "No se encontraron vulnerabilidades crÃ­ticas o altas." > security-reports/vuln_report_${REPORT_DATE}.txt
          fi
          
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add security-reports/vuln_report_${REPORT_DATE}.txt
          git commit -m "chore: add security scan report ${REPORT_DATE}" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/} || echo "No changes to push"

  build:
    runs-on: self-hosted
    needs: [security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: 'v0.19.2'
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to Custom Git Registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USER }} --password-stdin
        
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} . || (sleep 10 && docker build -t ${{ env.IMAGE_NAME }} .)
      
      - name: Export Docker image
        run: |
          docker save ${{ env.IMAGE_NAME }} > ${{ env.IMAGE_NAME }}.tar
      
      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ${{ env.IMAGE_NAME }}.tar

  push:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Generate build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
      
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
      
      - name: Login to Custom Git Registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USER }} --password-stdin
      
      - name: Import Docker image
        run: docker load < ${{ env.IMAGE_NAME }}.tar
      
      - name: Push Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:dev
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:dev

  cleanup:
    needs: [push]
    if: always()
    runs-on: self-hosted
    steps:
      - name: Clean up resources
        continue-on-error: true
        run: |
          docker rmi ${{ env.IMAGE_NAME }} || true
          docker rmi ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest || true
          docker system prune -af --volumes || true
